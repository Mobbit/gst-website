<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Geekstammtisch</title>
        <link>http://geekstammtisch.de</link>
        <atom:link rel="self" href="http://geekstammtisch.de/episodes.mp3.rss" type="application/rss+xml" title="MP3 Audio"/>
        
        <atom:link rel="alternate" href="http://geekstammtisch.de/episodes.m4a.rss" type="application/rss+xml" title="M4A Audio"/>
        
        <language>de-de</language>
        <generator>gst-kitchen</generator>
        <copyright>Dirk Breuer, Sebastian Cohnen, cc-by-nc-sa</copyright>
        <itunes:subtitle>Das heimelige Nerdgespräch über Webentwicklung, Ruby/Rails und mehr</itunes:subtitle>
        <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
        <managingEditor>alle@geekstammtisch.de (Dirk Breuer, Sebastian Cohnen)</managingEditor>
        <itunes:summary>Mehr oder weniger regelmäßiger Stammtisch rund um Nerdthemen und Webdevelopment</itunes:summary>
        <itunes:explicit>no</itunes:explicit>
        <description>Mehr oder weniger regelmäßiger Stammtisch rund um Nerdthemen und Webdevelopment</description>
        <itunes:owner>
            <itunes:name>Dirk Breuer, Sebastian Cohnen</itunes:name>
            <itunes:email>alle@geekstammtisch.de</itunes:email>
        </itunes:owner>

        <itunes:image href="http://geekstammtisch.de/images/cover.jpg"/>

        <itunes:category text="Technology"/>
        <itunes:category text="Technology">
            <itunes:category text="Gadgets"/>
        </itunes:category>
        <itunes:category text="Technology">
            <itunes:category text="Tech News"/>
        </itunes:category>

        
        <item>
          <title>GST000 - Batteries Included</title>
          <itunes:explicit>no</itunes:explicit>
          <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
          <itunes:subtitle>GST000 - Batteries Included</itunes:subtitle>
          <enclosure url="http://media.geekstammtisch.de/episodes/gst000.mp3" length="30692371" type="audio/mpeg"/>
          <guid isPermaLink="false">GST000</guid>
          <pubDate>Mon, 17 Dec 2012 19:02:58 +0100</pubDate>
          <itunes:duration>00:42:27</itunes:duration>
          <itunes:summary><![CDATA[### Geekstammtisch Publishing Prozess
  * Inspiriert durch IGOR (https://github.com/m4p/fanboys-IGOR)
  * https://github.com/tisba/gst-website
  * https://github.com/tisba/gst-kitchen
  * Aufnahmen, Auphonic (Processing, Metadaten), Auphonic API, Feed Rendern, rake deploy, fertig!

### Ruby Compile Tricks (Performance!!11!1)
  * http://alisnic.net/blog/making-your-ruby-fly
  * http://spin.atomicobject.com/2012/11/06/is-your-application-running-with-ruby-slow/
  * Falcon Patch (https://gist.github.com/1688857)
  * Compile Flags auslesen aus einem gebauten Ruby: ruby -rpp -rrbconfig.rb -e "include RbConfig; pp CONFIG"

## Ruby Upgrade mit RVM
  * `rvm upgrade ruby-1.9.3-p286 ruby-1.9.3-p327`
  * Installiert 1.9.3-p327 migriert alle gems und wirft die alte Ruby version
  auch komplett weg, wenn gewünscht

### Ruby Entwicklung
  * Core-Developer aller Implementierungen haben sich im IRC getroffen
  * Matz behält sich das Recht vor, Dinge alleine zu entscheiden: “I’m not going to stop being the dictator but I want you guys to participate in the process of improving the language”
  * Offene Fragen, u.a. ‘If an implementation can't implement something, is it not "ruby"?’
  * Hängt mit dem Talk von Brian Ford auf der RubyConf 2012 zusammen: http://www.confreaks.com/videos/1278-rubyconf2012-toward-a-design-for-ruby
  * http://bugs.ruby-lang.org/projects/ruby/wiki/DevelopersMeeting20121210

## gem picks
  * `better_errors`: https://github.com/charliesome/better_errors
    * schöne Rails/Rack Fehlerseiten mit REPL!!1!11
    * benötigt für die REPL dark ruby magic von https://github.com/banister/binding_of_caller

### Apps
  * iStats Menu 3 mit Retina, Historie, Update für 7 EUR (http://bjango.com/mac/istatmenus/)
  * Instacast 3, neue App, universal, eigener Sync Service (https://itunes.apple.com/de/app/instacast/id577056377?mt=8&affId=1644991)

## Best Practices
  * Composition over Inheritance?! (http://en.wikipedia.org/wiki/Composition_over_inheritance)

## Github's Gists in Neu und Bunt, schön :)
  * Github Blog Post: https://github.com/blog/1276-welcome-to-a-new-gist

## Events
  * RailsGirls Followups erfolgreich
  * Weiter geht's im März mit Rails Girls Rheinland in Monheim (http://railsgirls.com/rheinland)
  * cologne.rb Weihnachtsmarkt Eddition im Dezember (Twitter @colognerb)]]></itunes:summary>
          <description><![CDATA[<h3>Geekstammtisch Publishing Prozess</h3>

<ul>
<li>Inspiriert durch IGOR (<a href="https://github.com/m4p/fanboys-IGOR">https://github.com/m4p/fanboys-IGOR</a>)</li>
<li><a href="https://github.com/tisba/gst-website">https://github.com/tisba/gst-website</a></li>
<li><a href="https://github.com/tisba/gst-kitchen">https://github.com/tisba/gst-kitchen</a></li>
<li>Aufnahmen, Auphonic (Processing, Metadaten), Auphonic API, Feed Rendern, rake deploy, fertig!</li>
</ul>

<h3>Ruby Compile Tricks (Performance!!11!1)</h3>

<ul>
<li><a href="http://alisnic.net/blog/making-your-ruby-fly">http://alisnic.net/blog/making-your-ruby-fly</a></li>
<li><a href="http://spin.atomicobject.com/2012/11/06/is-your-application-running-with-ruby-slow/">http://spin.atomicobject.com/2012/11/06/is-your-application-running-with-ruby-slow/</a></li>
<li>Falcon Patch (<a href="https://gist.github.com/1688857">https://gist.github.com/1688857</a>)</li>
<li>Compile Flags auslesen aus einem gebauten Ruby: ruby -rpp -rrbconfig.rb -e &quot;include RbConfig; pp CONFIG&quot;</li>
</ul>

<h2>Ruby Upgrade mit RVM</h2>

<ul>
<li><code>rvm upgrade ruby-1.9.3-p286 ruby-1.9.3-p327</code></li>
<li>Installiert 1.9.3-p327 migriert alle gems und wirft die alte Ruby version
auch komplett weg, wenn gewünscht</li>
</ul>

<h3>Ruby Entwicklung</h3>

<ul>
<li>Core-Developer aller Implementierungen haben sich im IRC getroffen</li>
<li>Matz behält sich das Recht vor, Dinge alleine zu entscheiden: “I’m not going to stop being the dictator but I want you guys to participate in the process of improving the language”</li>
<li>Offene Fragen, u.a. ‘If an implementation can&#39;t implement something, is it not &quot;ruby&quot;?’</li>
<li>Hängt mit dem Talk von Brian Ford auf der RubyConf 2012 zusammen: <a href="http://www.confreaks.com/videos/1278-rubyconf2012-toward-a-design-for-ruby">http://www.confreaks.com/videos/1278-rubyconf2012-toward-a-design-for-ruby</a></li>
<li><a href="http://bugs.ruby-lang.org/projects/ruby/wiki/DevelopersMeeting20121210">http://bugs.ruby-lang.org/projects/ruby/wiki/DevelopersMeeting20121210</a></li>
</ul>

<h2>gem picks</h2>

<ul>
<li><code>better_errors</code>: <a href="https://github.com/charliesome/better_errors">https://github.com/charliesome/better_errors</a>

<ul>
<li>schöne Rails/Rack Fehlerseiten mit REPL!!1!11</li>
<li>benötigt für die REPL dark ruby magic von <a href="https://github.com/banister/binding_of_caller">https://github.com/banister/binding_of_caller</a></li>
</ul></li>
</ul>

<h3>Apps</h3>

<ul>
<li>iStats Menu 3 mit Retina, Historie, Update für 7 EUR (<a href="http://bjango.com/mac/istatmenus/">http://bjango.com/mac/istatmenus/</a>)</li>
<li>Instacast 3, neue App, universal, eigener Sync Service (<a href="https://itunes.apple.com/de/app/instacast/id577056377?mt=8&amp;affId=1644991">https://itunes.apple.com/de/app/instacast/id577056377?mt=8&amp;affId=1644991</a>)</li>
</ul>

<h2>Best Practices</h2>

<ul>
<li>Composition over Inheritance?! (<a href="http://en.wikipedia.org/wiki/Composition_over_inheritance">http://en.wikipedia.org/wiki/Composition_over_inheritance</a>)</li>
</ul>

<h2>Github&#39;s Gists in Neu und Bunt, schön :)</h2>

<ul>
<li>Github Blog Post: <a href="https://github.com/blog/1276-welcome-to-a-new-gist">https://github.com/blog/1276-welcome-to-a-new-gist</a></li>
</ul>

<h2>Events</h2>

<ul>
<li>RailsGirls Followups erfolgreich</li>
<li>Weiter geht&#39;s im März mit Rails Girls Rheinland in Monheim (<a href="http://railsgirls.com/rheinland">http://railsgirls.com/rheinland</a>)</li>
<li>cologne.rb Weihnachtsmarkt Eddition im Dezember (Twitter <a href="https://twitter.com/colognerb">@colognerb</a>)</li>
</ul>
]]></description>
          <atom:link rel="http://podlove.org/deep-link" href="http://geekstammtisch.de#0:" />
        </item>
        
        <item>
          <title>GST001 - Chubby Models on a Diet</title>
          <itunes:explicit>no</itunes:explicit>
          <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
          <itunes:subtitle>GST001 - Chubby Models on a Diet</itunes:subtitle>
          <enclosure url="http://media.geekstammtisch.de/episodes/gst001.mp3" length="38648523" type="audio/mpeg"/>
          <guid isPermaLink="false">GST001</guid>
          <pubDate>Mon, 07 Jan 2013 20:50:46 +0100</pubDate>
          <itunes:duration>00:53:30</itunes:duration>
          <itunes:summary><![CDATA[### Errata

  * Refinements sind doch drin, aber nur in sehr eingeschränkter Weise (https://bugs.ruby-lang.org/issues/4085#note-175)
    (via @klaustopher)
  * Bodo’s (@bitboxer) Feedback zu rvm vs. rbenv
    * `.ruby-version` erlaubt die Verwendung einer Ruby-Version pro Verzeichnis (https://github.com/sstephenson/rbenv#rbenv-local)
    * Realisiert wird das mit `shims`: https://github.com/sstephenson/rbenv#understanding-shims
    * Das `cd` Kommando _nicht_ überschreiben, ist einfach sauberer
    * rbenv ist eher UNIX-Style: Ein Tool für eine Aufgabe
    * Bodo hat schon Probleme auf dem Server, gibt aber zu "da schon tief für in die Scheisse greifen" zu müssen

## In eigener Sache

  * Endlich auch im iTunes Store und damit auch in Instacast!
    * Nach dem Store mehr mp4 Downloads als mp3! (2:1)
    * Download Zahlen von Podcasts ermitteln: nicht einfach :-/
  * Und auch via Bittorrent (http://bitlove.org/tisba/gst)
    * Mac OS X Client mit Torrent Support: http://www.getmiro.com/
  * Nettes Feedback zum gst-kitchen Publishing Prozess von @auphonic und @timpritlove

## Ruby

  * Ruby 1.9.3p362 released, macht aber wohl Probleme (seg faults)
    * https://github.com/travis-ci/travis-ci/issues/827
    * https://bugs.ruby-lang.org/issues/7629
  * Ruby Compilation
    * mruby in ArangoDB: http://www.arangodb.org/
    * mruby nach JavaScript Complier: http://qiezi.me/projects/mruby-web-irb/mruby.html
    * Ruby zu Java-Quellcode!1!!11!: https://github.com/headius/rubyflux

## Rails

  * SQL Injection Vector (OMG!)
    * Rails 3.2.10/3.1.9/3.0.18: http://weblog.rubyonrails.org/2013/1/2/Rails-3-2-10--3-1-9--and-3-0-18-have-been-released/
    * Alles halb so wild: http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts/

## Software Development

  * Put chubby models on a diet with concerns
    * @dhh legt los: http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns
    * Gegenmeinung von Corey Haines: http://programmingtour.blogspot.de/2012/12/why-i-dont-use-activesupportconcern.html
    * tl;dr: `ActionSupport::Concerns` macht mehr als nur `include/extend`, nämlich auch Dependency Management

### Binstubs

  * Diskussion ob einchecken oder nicht: https://github.com/rails/rails/commit/61b91c4c55bcbd5a2ec85d6e1c67755150653dff
  * Was sind Binstubs: https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs
  * Ohne `bundle exec` leben: `bundle install --binstubs`

### SCM Hosting:

  * gitlab
    * Open Source Klon von GitHub
    * http://gitlabhq.com/
    * Dirk hat’s getestet
    * Kostenpflichtige Alternative: Github Enterprise (https://enterprise.github.com/) und Stash (http://www.atlassian.com/software/stash/overview)

## Random Stuff

  * Linus Torvalds beschimpft Kernel-Entwickler: https://lkml.org/lkml/2012/12/23/75
  * `conference.jabber.org`: Group-Chat Service kostenlos, wenn man das mal brauchen sollte ;-)]]></itunes:summary>
          <description><![CDATA[<h3>Errata</h3>

<ul>
<li>Refinements sind doch drin, aber nur in sehr eingeschränkter Weise (<a href="https://bugs.ruby-lang.org/issues/4085#note-175">https://bugs.ruby-lang.org/issues/4085#note-175</a>)
(via <a href="https://twitter.com/klaustopher">@klaustopher</a>)</li>
<li>Bodo’s (<a href="https://twitter.com/bitboxer">@bitboxer</a>) Feedback zu rvm vs. rbenv

<ul>
<li><code>.ruby-version</code> erlaubt die Verwendung einer Ruby-Version pro Verzeichnis (<a href="https://github.com/sstephenson/rbenv#rbenv-local">https://github.com/sstephenson/rbenv#rbenv-local</a>)</li>
<li>Realisiert wird das mit <code>shims</code>: <a href="https://github.com/sstephenson/rbenv#understanding-shims">https://github.com/sstephenson/rbenv#understanding-shims</a></li>
<li>Das <code>cd</code> Kommando <em>nicht</em> überschreiben, ist einfach sauberer</li>
<li>rbenv ist eher UNIX-Style: Ein Tool für eine Aufgabe</li>
<li>Bodo hat schon Probleme auf dem Server, gibt aber zu &quot;da schon tief für in die Scheisse greifen&quot; zu müssen</li>
</ul></li>
</ul>

<h2>In eigener Sache</h2>

<ul>
<li>Endlich auch im iTunes Store und damit auch in Instacast!

<ul>
<li>Nach dem Store mehr mp4 Downloads als mp3! (2:1)</li>
<li>Download Zahlen von Podcasts ermitteln: nicht einfach :-/</li>
</ul></li>
<li>Und auch via Bittorrent (<a href="http://bitlove.org/tisba/gst">http://bitlove.org/tisba/gst</a>)

<ul>
<li>Mac OS X Client mit Torrent Support: <a href="http://www.getmiro.com/">http://www.getmiro.com/</a></li>
</ul></li>
<li>Nettes Feedback zum gst-kitchen Publishing Prozess von <a href="https://twitter.com/auphonic">@auphonic</a> und <a href="https://twitter.com/timpritlove">@timpritlove</a></li>
</ul>

<h2>Ruby</h2>

<ul>
<li>Ruby 1.9.3p362 released, macht aber wohl Probleme (seg faults)

<ul>
<li><a href="https://github.com/travis-ci/travis-ci/issues/827">https://github.com/travis-ci/travis-ci/issues/827</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/7629">https://bugs.ruby-lang.org/issues/7629</a></li>
</ul></li>
<li>Ruby Compilation

<ul>
<li>mruby in ArangoDB: <a href="http://www.arangodb.org/">http://www.arangodb.org/</a></li>
<li>mruby nach JavaScript Complier: <a href="http://qiezi.me/projects/mruby-web-irb/mruby.html">http://qiezi.me/projects/mruby-web-irb/mruby.html</a></li>
<li>Ruby zu Java-Quellcode!1!!11!: <a href="https://github.com/headius/rubyflux">https://github.com/headius/rubyflux</a></li>
</ul></li>
</ul>

<h2>Rails</h2>

<ul>
<li>SQL Injection Vector (OMG!)

<ul>
<li>Rails 3.2.10/3.1.9/3.0.18: <a href="http://weblog.rubyonrails.org/2013/1/2/Rails-3-2-10--3-1-9--and-3-0-18-have-been-released/">http://weblog.rubyonrails.org/2013/1/2/Rails-3-2-10--3-1-9--and-3-0-18-have-been-released/</a></li>
<li>Alles halb so wild: <a href="http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts/">http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts/</a></li>
</ul></li>
</ul>

<h2>Software Development</h2>

<ul>
<li>Put chubby models on a diet with concerns

<ul>
<li><a href="https://twitter.com/dhh">@dhh</a> legt los: <a href="http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns">http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns</a></li>
<li>Gegenmeinung von Corey Haines: <a href="http://programmingtour.blogspot.de/2012/12/why-i-dont-use-activesupportconcern.html">http://programmingtour.blogspot.de/2012/12/why-i-dont-use-activesupportconcern.html</a></li>
<li>tl;dr: <code>ActionSupport::Concerns</code> macht mehr als nur <code>include/extend</code>, nämlich auch Dependency Management</li>
</ul></li>
</ul>

<h3>Binstubs</h3>

<ul>
<li>Diskussion ob einchecken oder nicht: <a href="https://github.com/rails/rails/commit/61b91c4c55bcbd5a2ec85d6e1c67755150653dff">https://github.com/rails/rails/commit/61b91c4c55bcbd5a2ec85d6e1c67755150653dff</a></li>
<li>Was sind Binstubs: <a href="https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs">https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs</a></li>
<li>Ohne <code>bundle exec</code> leben: <code>bundle install --binstubs</code></li>
</ul>

<h3>SCM Hosting:</h3>

<ul>
<li>gitlab

<ul>
<li>Open Source Klon von GitHub</li>
<li><a href="http://gitlabhq.com/">http://gitlabhq.com/</a></li>
<li>Dirk hat’s getestet</li>
<li>Kostenpflichtige Alternative: Github Enterprise (<a href="https://enterprise.github.com/">https://enterprise.github.com/</a>) und Stash (<a href="http://www.atlassian.com/software/stash/overview">http://www.atlassian.com/software/stash/overview</a>)</li>
</ul></li>
</ul>

<h2>Random Stuff</h2>

<ul>
<li>Linus Torvalds beschimpft Kernel-Entwickler: <a href="https://lkml.org/lkml/2012/12/23/75">https://lkml.org/lkml/2012/12/23/75</a></li>
<li><code>conference.jabber.org</code>: Group-Chat Service kostenlos, wenn man das mal brauchen sollte ;-)</li>
</ul>
]]></description>
          <atom:link rel="http://podlove.org/deep-link" href="http://geekstammtisch.de#1:" />
        </item>
        
        <item>
          <title>GST002 - Shell ist immer da</title>
          <itunes:explicit>no</itunes:explicit>
          <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
          <itunes:subtitle>GST002 - Shell ist immer da</itunes:subtitle>
          <enclosure url="http://media.geekstammtisch.de/episodes/gst002.mp3" length="43681307" type="audio/mpeg"/>
          <guid isPermaLink="false">GST002</guid>
          <pubDate>Mon, 21 Jan 2013 22:12:54 +0100</pubDate>
          <itunes:duration>01:00:29</itunes:duration>
          <itunes:summary><![CDATA[Heute mit unserem ersten Gast: Sebastian Schulze (@bascht, http://bascht.com/)

### Errata

  * Von Bodo zu Ruby Patch 1.9.3-p362:
    * Das ist nich nur unwichtiges Zeug drin gewesen:
      Zum Beispiel wurde der Hash-Algo von Murmurhash
      zu SipHash geändert um Hash Flodding und damit
      DOS zu verhindern.
    * Details dazu gab es auf dem 29c3 in diesem Vortrag: http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html
      * Video: http://mirror.fem-net.de/CCC/29C3/mp4-h264-HQ/29c3-5152-en-hashflooding_dos_reloaded_h264.mp4

### Ruby

  * Fix all the SEGFAULTs (with 1.9.3-p374)
  * Nokogiri von der Commandozeile (https://github.com/sparklemotion/nokogiri/blob/master/bin/nokogiri)
  * Aaron Patterson, Ryan Davis: Worst. Ideas. Ever. http://www.confreaks.com/videos/198-rubyconf2009-worst-ideas-ever
  * Bascht hat ein Web-Entwickler Background ist aber mittlerweile als freier DevOps unterwegs (http://blog.csanchez.org/2012/03/13/infrastructure-as-code/)
  * http://devopsreactions.tumblr.com/
  * Bascht deployed auch schon mal im JRuby Kontext:
    * Maven, Tomcat, War-Files und so weiter…
  * Java-Entwickler sind sehr nette Leute :-)
  * Scripting mit Bash?
  * Oder einfach direkt in Ruby :-)
    * Brightbox Debian Packages/PPA (http://docs.brightbox.com/ruby/ubuntu/)
  * Einfach immer Gemfiles verwenden
    * `bundle console`: http://gembundler.com/v1.2/bundle_console.html
  * Schmankerl: OpenLDAP Configure Script in knackigen 26k LOCs (http://code.metager.de/source/xref/openldap/configure#430)
    * Unit testing for Bash: https://code.google.com/p/shunit2/ (Dirk hat's gefunden)
  * Test-Driven-Admin
  * Automatisierung muss sein, weil man will nicht das hier: http://eric.lubow.org/wp-content/uploads/2010/03/cssh_screenshot.jpg
    * Cluster Shell (http://sourceforge.net/projects/clusterssh/)
    * Oder einfach mit iTerm2 ("Shell" -> "Broadcast Input")
  * Echte Automatisierung:
    * Am besten direkt von Anfang an richtig machen!
    * Puppet: http://puppetlabs.com/
    * Chef: http://www.opscode.com/chef/
    * Chef-Doku: http://docs.opscode.com/
    * KEINEN eigenen Chef-Server zum testen aufsetzen, einfach kostenlos bei Opscode einen nehmen: https://manage.opscode.com/
    * irgendwas anderes / eigenes ;-) (immer noch besser als manuell)
    * Keine Angst mehr vor Freitagnachmittag-Deploys: http://devopsreactions.tumblr.com/post/37823969926/a-small-infrastructure-change-4pm-friday
  * GST berichtete: mruby-web-irb is now WebRuby: https://github.com/xxuejie/webruby
  * Ruby Facets: https://github.com/rubyworks/facets
  * Zucker: http://rubyzucker.info/
  * Anwendungsfall für ActiveSupport: http://bascht.hasbeen.in

### Rails

  * OMG!1!, more security fixes
    * Rails 3.2.11, 3.1.10, 3.0.19 und sogar 2.3.15 released
    * CVE-2013-0155: https://groups.google.com/group/rubyonrails-security/browse_thread/thread/b75585bae4326af2
    * CVE-2013-0156: https://groups.google.com/group/rubyonrails-security/browse_thread/thread/eb56e482f9d21934
  * View-Decorator: https://github.com/drapergem/draper
  * Gary Berhardt: "How do we stop our Rails apps from being so horrible when they grow up?"

### Web Services

  * http://hackdesign.org/ - Desing courses for Hacker

### Events

  * cologne.rb braucht Talks: https://github.com/colognerb/talks/wiki/Potentielle-Themen
    * Unser Talk: https://speakerdeck.com/railsbros_dirk/cologne-dot-rb-magic-kindergarten
  * Am 6.7. ist Iron Maiden in Oberhausen \m/
    * Sigint findet auch an diesem Wochenende statt: http://sigint.ccc.de/ (5.-7.7.2013)
  * Railsgirls treffen sich auch wieder (31.01.): http://www.nerdhub.de/events/115-rails-girls-cologne/dates/1442)
  * wroc_love.rb: Zweiter Batch an Tickets raus - https://tito.io/wrocloverb/2013

### Offtopic

  * Dokumentation über das Phänomen Bronies: http://www.bronydoc.com/Brony/MAIN.html :-)
  * Pony Podcast: http://ponytime.net/]]></itunes:summary>
          <description><![CDATA[<p>Heute mit unserem ersten Gast: Sebastian Schulze (<a href="https://twitter.com/bascht">@bascht</a>, <a href="http://bascht.com/">http://bascht.com/</a>)</p>

<h3>Errata</h3>

<ul>
<li>Von Bodo zu Ruby Patch 1.9.3-p362:

<ul>
<li>Das ist nich nur unwichtiges Zeug drin gewesen:
Zum Beispiel wurde der Hash-Algo von Murmurhash
zu SipHash geändert um Hash Flodding und damit
DOS zu verhindern.</li>
<li>Details dazu gab es auf dem 29c3 in diesem Vortrag: <a href="http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html">http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html</a>

<ul>
<li>Video: <a href="http://mirror.fem-net.de/CCC/29C3/mp4-h264-HQ/29c3-5152-en-hashflooding_dos_reloaded_h264.mp4">http://mirror.fem-net.de/CCC/29C3/mp4-h264-HQ/29c3-5152-en-hashflooding_dos_reloaded_h264.mp4</a></li>
</ul></li>
</ul></li>
</ul>

<h3>Ruby</h3>

<ul>
<li>Fix all the SEGFAULTs (with 1.9.3-p374)</li>
<li>Nokogiri von der Commandozeile (<a href="https://github.com/sparklemotion/nokogiri/blob/master/bin/nokogiri">https://github.com/sparklemotion/nokogiri/blob/master/bin/nokogiri</a>)</li>
<li>Aaron Patterson, Ryan Davis: Worst. Ideas. Ever. <a href="http://www.confreaks.com/videos/198-rubyconf2009-worst-ideas-ever">http://www.confreaks.com/videos/198-rubyconf2009-worst-ideas-ever</a></li>
<li>Bascht hat ein Web-Entwickler Background ist aber mittlerweile als freier DevOps unterwegs (<a href="http://blog.csanchez.org/2012/03/13/infrastructure-as-code/">http://blog.csanchez.org/2012/03/13/infrastructure-as-code/</a>)</li>
<li><a href="http://devopsreactions.tumblr.com/">http://devopsreactions.tumblr.com/</a></li>
<li>Bascht deployed auch schon mal im JRuby Kontext:

<ul>
<li>Maven, Tomcat, War-Files und so weiter…</li>
</ul></li>
<li>Java-Entwickler sind sehr nette Leute :-)</li>
<li>Scripting mit Bash?</li>
<li>Oder einfach direkt in Ruby :-)

<ul>
<li>Brightbox Debian Packages/PPA (<a href="http://docs.brightbox.com/ruby/ubuntu/">http://docs.brightbox.com/ruby/ubuntu/</a>)</li>
</ul></li>
<li>Einfach immer Gemfiles verwenden

<ul>
<li><code>bundle console</code>: <a href="http://gembundler.com/v1.2/bundle_console.html">http://gembundler.com/v1.2/bundle_console.html</a></li>
</ul></li>
<li>Schmankerl: OpenLDAP Configure Script in knackigen 26k LOCs (<a href="http://code.metager.de/source/xref/openldap/configure#430">http://code.metager.de/source/xref/openldap/configure#430</a>)

<ul>
<li>Unit testing for Bash: <a href="https://code.google.com/p/shunit2/">https://code.google.com/p/shunit2/</a> (Dirk hat&#39;s gefunden)</li>
</ul></li>
<li>Test-Driven-Admin</li>
<li>Automatisierung muss sein, weil man will nicht das hier: <a href="http://eric.lubow.org/wp-content/uploads/2010/03/cssh_screenshot.jpg">http://eric.lubow.org/wp-content/uploads/2010/03/cssh_screenshot.jpg</a>

<ul>
<li>Cluster Shell (<a href="http://sourceforge.net/projects/clusterssh/">http://sourceforge.net/projects/clusterssh/</a>)</li>
<li>Oder einfach mit iTerm2 (&quot;Shell&quot; -&gt; &quot;Broadcast Input&quot;)</li>
</ul></li>
<li>Echte Automatisierung:

<ul>
<li>Am besten direkt von Anfang an richtig machen!</li>
<li>Puppet: <a href="http://puppetlabs.com/">http://puppetlabs.com/</a></li>
<li>Chef: <a href="http://www.opscode.com/chef/">http://www.opscode.com/chef/</a></li>
<li>Chef-Doku: <a href="http://docs.opscode.com/">http://docs.opscode.com/</a></li>
<li>KEINEN eigenen Chef-Server zum testen aufsetzen, einfach kostenlos bei Opscode einen nehmen: <a href="https://manage.opscode.com/">https://manage.opscode.com/</a></li>
<li>irgendwas anderes / eigenes ;-) (immer noch besser als manuell)</li>
<li>Keine Angst mehr vor Freitagnachmittag-Deploys: <a href="http://devopsreactions.tumblr.com/post/37823969926/a-small-infrastructure-change-4pm-friday">http://devopsreactions.tumblr.com/post/37823969926/a-small-infrastructure-change-4pm-friday</a></li>
</ul></li>
<li>GST berichtete: mruby-web-irb is now WebRuby: <a href="https://github.com/xxuejie/webruby">https://github.com/xxuejie/webruby</a></li>
<li>Ruby Facets: <a href="https://github.com/rubyworks/facets">https://github.com/rubyworks/facets</a></li>
<li>Zucker: <a href="http://rubyzucker.info/">http://rubyzucker.info/</a></li>
<li>Anwendungsfall für ActiveSupport: <a href="http://bascht.hasbeen.in">http://bascht.hasbeen.in</a></li>
</ul>

<h3>Rails</h3>

<ul>
<li>OMG!1!, more security fixes

<ul>
<li>Rails 3.2.11, 3.1.10, 3.0.19 und sogar 2.3.15 released</li>
<li>CVE-2013-0155: <a href="https://groups.google.com/group/rubyonrails-security/browse_thread/thread/b75585bae4326af2">https://groups.google.com/group/rubyonrails-security/browse_thread/thread/b75585bae4326af2</a></li>
<li>CVE-2013-0156: <a href="https://groups.google.com/group/rubyonrails-security/browse_thread/thread/eb56e482f9d21934">https://groups.google.com/group/rubyonrails-security/browse_thread/thread/eb56e482f9d21934</a></li>
</ul></li>
<li>View-Decorator: <a href="https://github.com/drapergem/draper">https://github.com/drapergem/draper</a></li>
<li>Gary Berhardt: &quot;How do we stop our Rails apps from being so horrible when they grow up?&quot;</li>
</ul>

<h3>Web Services</h3>

<ul>
<li><a href="http://hackdesign.org/">http://hackdesign.org/</a> - Desing courses for Hacker</li>
</ul>

<h3>Events</h3>

<ul>
<li>cologne.rb braucht Talks: <a href="https://github.com/colognerb/talks/wiki/Potentielle-Themen">https://github.com/colognerb/talks/wiki/Potentielle-Themen</a>

<ul>
<li>Unser Talk: <a href="https://speakerdeck.com/railsbros_dirk/cologne-dot-rb-magic-kindergarten">https://speakerdeck.com/railsbros_dirk/cologne-dot-rb-magic-kindergarten</a></li>
</ul></li>
<li>Am 6.7. ist Iron Maiden in Oberhausen \m/

<ul>
<li>Sigint findet auch an diesem Wochenende statt: <a href="http://sigint.ccc.de/">http://sigint.ccc.de/</a> (5.-7.7.2013)</li>
</ul></li>
<li>Railsgirls treffen sich auch wieder (31.01.): <a href="http://www.nerdhub.de/events/115-rails-girls-cologne/dates/1442">http://www.nerdhub.de/events/115-rails-girls-cologne/dates/1442</a>)</li>
<li>wroc_love.rb: Zweiter Batch an Tickets raus - <a href="https://tito.io/wrocloverb/2013">https://tito.io/wrocloverb/2013</a></li>
</ul>

<h3>Offtopic</h3>

<ul>
<li>Dokumentation über das Phänomen Bronies: <a href="http://www.bronydoc.com/Brony/MAIN.html">http://www.bronydoc.com/Brony/MAIN.html</a> :-)</li>
<li>Pony Podcast: <a href="http://ponytime.net/">http://ponytime.net/</a></li>
</ul>
]]></description>
          <atom:link rel="http://podlove.org/deep-link" href="http://geekstammtisch.de#2:" />
        </item>
        
        <item>
          <title>GST003 - Mein Callstack ist kleiner</title>
          <itunes:explicit>no</itunes:explicit>
          <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
          <itunes:subtitle>GST003 - Mein Callstack ist kleiner</itunes:subtitle>
          <enclosure url="http://media.geekstammtisch.de/episodes/gst003.mp3" length="46233055" type="audio/mpeg"/>
          <guid isPermaLink="false">GST003</guid>
          <pubDate>Mon, 28 Jan 2013 21:07:15 +0100</pubDate>
          <itunes:duration>01:04:00</itunes:duration>
          <itunes:summary><![CDATA[Heute wieder mit Gast: Florian Gilcher (@Argorak, http://asquera.de/blog)

### Errata

  * Auf Grund der kurzen Zeit zwischen den Aufnahmen qausi ausgefallen. Oder einfach keine Fehler gemacht ;-)

### Unser Gast

  * Florian aus Berlin
    * Hat dort seine eigene Firma
    * Ist vor allem Backend-Entwickler \o/
    * Padrino.rb Core-Entwickler (Sinatra-basiertes Webframework: http://www.padrinorb.com)
    * Sehr aktiv im deutschen Ruby-Forum aktiv: http://forum.ruby-portal.de/
    * Hat letztes Jahr das eurucamp mitorganisiert: http://2012.eurucamp.org/
    * Und ist auch sonst sehr stark in der Community aktiv: "Community macht Spaß"

### Padrino

  * Entstanden aus Sinatra-Plugins
  * Auch heute ist eine Padrino-App "nur" eine Ansammlung von Sinatra-Apps
  * Padrino ist viel expliziter als Rails
  * Padrino "zwingt" den Entwickler sich mit vielen (allen) Entscheidungen selbst zu beschäftigen
  * Rails Pain #1: Initializer-Reihenfolge (auch von Engines), Paadrino kümmert sich nicht
    * Ladereihenfolge, Config etc muss man selbst machen
  * Rails Pain #2: Logger austauschen
    * Dirk empfiehlt das `logging` Gem https://github.com/TwP/logging
    * Basti und Dirk haben sonst wenig Probleme mit Logging
  * Eignet sich Padrino gut für Einsteiger?
    * Der Grund Aufwand ist nach Flo schon höher
    * Aber der Zusammenhang zwischen den Komponenten wird klarer
    * Padrino behandelt Padrino Erweiterungen (Engines) expliziter
    * Philosophie bei Padrino: Setzt euch mit den Dingen auseinander!
  * Rails und Einsteiger? Auch nicht mehr ganz so einfach…
    * Yehuda Katz baut deswegen Tokaido (https://github.com/tokaido/tokaidoapp)
    * Steve Klabnik: Rails has Two Default Stacks (http://words.steveklabnik.com/rails-has-two-default-stacks)
  * Padrino Getting Started
    * Es gibt auch Generatoren
    * Schritt Eins: HTTP-Stack
    * Komponenten müssen ausgewählt werden
      * Von Test-Framework bis ORM alles auszuwählen
      * In Ruby passt eigentlich alles gut zusammen ohne viel Aufwand
    * Mit Rack (http://rack.github.com/) ist alles besser geworden
  * Es gibt auch noch Ramaze: The Web Framework for Rubyists (http://ramaze.net/)
  * Flo träumt von Jeremy Evans’ sequel (https://github.com/jeremyevans/sequel)
  * PostgreSQL hstore (http://www.postgresql.org/docs/9.0/static/hstore.html)
    * ActiveRecord hat mittlerweile auch eine Unterstützung
  * ORM tauschen ist mit Padrino genauso schwer wie bei Rails
    * Bei echten Projekten tauscht man nicht einfach mal so das DB-Backend, ORM hin oder her
    * Padrino macht es auch nicht einfacher, gibt einem aber von Anfang die Info, dass es mehr
      als ein gibt
  * Doku bei Rails sehr monolitisch, bei Padrino für jede Komponente eine eigene, unabhängige Doku
  * Der Austausch von ActiveRecord ist wegen ActiveModel sehr leicht geworden
    * Sehr viele ORMs und Form-Helper nutzen sehr viel ActiveModel
  * Padrino benutzt ActiveSupport
    * Allerdings sehr wenig by default
  * Zwischenfazit: Der Entwickler wird bei Padrino eher gezwungen sich mit Komponenten und Entscheidungen
    kritisch zu beschäftigen
  * Padrino bietet besser dokumentierte APIs um Komponenten einzuschieben
    * Rails 2 Zeiten - reden wir nicht drüber
    * Immer noch Altlasten, z.B.: viele Möglichkeiten aus dem Controller zu rendern
    * Rails ist einfach gute Konkurrenz ;-)
    * Rails ist schon ein sehr mächtiges Werkzeug
  * Als Rails-Entwickler kann man sich gut von Padrino inspirieren lassen
  * Basti ist beeindruckt vom Merb-Rails Merge (http://rubyonrails.org/merb)

### Software Engineering

  * Bezug "How do we stop our Rails apps from being so horrible when they grow up?" (http://bit.ly/VFtzUI)
    * Alles unter dem Controller ist für Dirk immer noch ein sehr schwieriges Thema
  * Kann Padrino da unterstützen? Durch Aufklärung?
    * Bei Padrino ist der Tipp: Schnell raus aus dem Controller
    * Ein Webframework sollte vor allem den Web-Teil richtig machen
    * Bei allem danach hört die Unterstützung schnell auf
  * DCI (Data, context and interaction)
  * Flo arbeitet gerade einem Projekt mit Delegates ähnlich wie in Objective-C: Funktioniert super.
  * Dependency Injection ist eigentlich nur die richtigen Objekte an die richtige Stelle schieben
    * DI muss nicht Spring mit XML sein
    * Geht in Ruby viel einfacher
    * Geht auch in Java viel einfacher: Google Guice (https://code.google.com/p/google-guice/)
  * "Am Ende trennt sich bei diesen Themen einfach die Spreu vom Weizen"
    * ActiveRecord führt einen aber vielleicht zu weit in einen falsche Richtung
    * Allerdings: Nie wieder ohne ORM
  * Anemic Domain Model von Martin Fowler (http://martinfowler.com/bliki/AnemicDomainModel.html)
    * Ist ein Anti-Pattern
    * Sieht aus wie ein Domain-Model, aber:
      * Models halten nur Daten
      * Verhalten lebt in einem prozeduralen Service-Layer
    * Lösung sind dann "richtige" Domain-Models (http://martinfowler.com/eaaCatalog/domainModel.html) und
      "richtige" Service-Layer (http://martinfowler.com/eaaCatalog/serviceLayer.html)
    * Basti hat bisher noch nie davon gehört
    * Flo hat P of EAA nur überflogen aber Refactoring gefressen
      * Wichtigste Erkenntnis: Feature Hut ODER Refactoring Hut NIEMALS beides!
  * Die Zwei Stacks von Rails (http://words.steveklabnik.com/rails-has-two-default-stacks)
    * Omakase (http://en.wikipedia.org/wiki/Omakase) vs. Prime (http://en.wikipedia.org/wiki/Prime_(symbol)#Use_in_mathematics.2C_statistics.2C_and_science)
      * Omakase: ERB, MySQL, minitest, Fat Models, Skinny Controllers
      * Prima: HAML, PostgreSQL, RSpec & Cucumber, Fat Models, Skinny
      Controllers, Service Layer
    * Für Rails ist DHH der Sushi-Chef: http://david.heinemeierhansson.com/2012/rails-is-omakase.html
    * Es geht nicht um besser oder schlechter
    * Wie kommen Anfänger klar?
    * Eigentlich muss man sich gar nicht aktiv entscheiden, wie kommt man überhaupt auf den anderen Stack
      * PostgreSQL ist die Profi-Alernative zu MySQL
      * Mehr Aufwand in der Wartung verhält sich aber viel wartbarer
      * MySQL lässt sich trotzdem sehr gut betreiben
      * Flo steht auf rustikale Software
      * Man entdeckt Tablespaces (http://www.postgresql.org/docs/8.3/static/manage-ag-tablespaces.html)
    * Basti mag eher RSpec aber nimmt sonst eher den Omakase Stack
    * Flo mag mehr ERb nimmt aber Postgres
    * Eigentlich passt der Name eh nicht, weil ein guter Chef setzt einem nicht zweimal das gleiche Essen vor
      * Idee: Stack-Randomizer im Projektgenerator
  * Flo kennt das Rubyworks-Ökosystem
    * Wir haben das maßlos unterschätzt
    * Ist Thomas Sawyer (http://rubyworks.github.com/)
    * Ruby Q.E.D.: Cucumber auf Steroiden (https://github.com/rubyworks/qed)
    * Verwendet AE als Test-Lib (http://rubyworks.github.com/ae/) auch von ihm
    * Es lassen sich damit Blog-Posts testen
  * Semantic-Versioning at its best: https://github.com/sunaku/tork
  * Mit viel Liebe und Mühe sehr gute Libraries und die Masse verwendet es noch nichtmal
    * https://github.com/sunaku/inochi
  * RSpec's Doku ist in Cucumber (https://www.relishapp.com/)
  * Dokumentation ist nicht trivial
  * Zed Shaw hat einmal gesagt, dass das Problem darin besteht, dass wir den Leuten beibringen müssen wie sie es entwicklen
    * Die Technik ist da, das Lernen ist das Problem
    * Code-Review ist dafür gut
    * In guten Teams geht nichts einfach durch
    * Es geht dabei um Code, nicht um Kritik an der Person

### Tools

  * JSON
    * JSON Pretty Print: https://github.com/jmhodges/jsonpp
    * jq: http://stedolan.github.com/jq/
      * JSON Path ist Kindergarten
  * httpie statt curl: https://github.com/jkbr/httpie
  * CodeRay hat einen Terminal Highlighter (http://coderay.rubychan.de/)
    * Sehr genau, weniger Sprachen als Pygments (http://pygments.org/)
  * Hosting Static Pages:
    * GitHub Pages (http://pages.github.com/)
    * Muss nicht nur Jekyll sein…
    * http://neilmiddleton.com/the-composability-of-buildpacks/
    * http://middlemanapp.com/ -> Heroku
    * Auch gut für Bloggen im Zug
  * Empfehlung: Syntax-Sonntag bei Ruby-Mine (http://www.ruby-mine.de/)
    * Sehr gute Einführung in Oniguruma (http://www.ruby-mine.de/wonado)
  * Gutes deutsches Ruby-Wiki: http://wiki.ruby-portal.de/Hauptseite
  * Open-Source Nachbau des RPG-Makers (http://www.rpgmakerweb.com/) in Ruby (http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards)
  * Ruby-Forum ist immer noch in PHP :-)
  * Foren sind irgendwie nicht mehr aktuell, wird aber noch nachgefragt

### Events

  * Insider-Infos zur SIGINT (Nachtrag):
    * Mehr Technik-Bezug incoming!
    * CFP soll ganz bald starten
  * eurucamp findet auch wieder 2013 statt: http://eurucamp.org/ (16. - 18. August 2013)]]></itunes:summary>
          <description><![CDATA[<p>Heute wieder mit Gast: Florian Gilcher (<a href="https://twitter.com/Argorak">@Argorak</a>, <a href="http://asquera.de/blog">http://asquera.de/blog</a>)</p>

<h3>Errata</h3>

<ul>
<li>Auf Grund der kurzen Zeit zwischen den Aufnahmen qausi ausgefallen. Oder einfach keine Fehler gemacht ;-)</li>
</ul>

<h3>Unser Gast</h3>

<ul>
<li>Florian aus Berlin

<ul>
<li>Hat dort seine eigene Firma</li>
<li>Ist vor allem Backend-Entwickler \o/</li>
<li>Padrino.rb Core-Entwickler (Sinatra-basiertes Webframework: <a href="http://www.padrinorb.com">http://www.padrinorb.com</a>)</li>
<li>Sehr aktiv im deutschen Ruby-Forum aktiv: <a href="http://forum.ruby-portal.de/">http://forum.ruby-portal.de/</a></li>
<li>Hat letztes Jahr das eurucamp mitorganisiert: <a href="http://2012.eurucamp.org/">http://2012.eurucamp.org/</a></li>
<li>Und ist auch sonst sehr stark in der Community aktiv: &quot;Community macht Spaß&quot;</li>
</ul></li>
</ul>

<h3>Padrino</h3>

<ul>
<li>Entstanden aus Sinatra-Plugins</li>
<li>Auch heute ist eine Padrino-App &quot;nur&quot; eine Ansammlung von Sinatra-Apps</li>
<li>Padrino ist viel expliziter als Rails</li>
<li>Padrino &quot;zwingt&quot; den Entwickler sich mit vielen (allen) Entscheidungen selbst zu beschäftigen</li>
<li>Rails Pain #1: Initializer-Reihenfolge (auch von Engines), Paadrino kümmert sich nicht

<ul>
<li>Ladereihenfolge, Config etc muss man selbst machen</li>
</ul></li>
<li>Rails Pain #2: Logger austauschen

<ul>
<li>Dirk empfiehlt das <code>logging</code> Gem <a href="https://github.com/TwP/logging">https://github.com/TwP/logging</a></li>
<li>Basti und Dirk haben sonst wenig Probleme mit Logging</li>
</ul></li>
<li>Eignet sich Padrino gut für Einsteiger?

<ul>
<li>Der Grund Aufwand ist nach Flo schon höher</li>
<li>Aber der Zusammenhang zwischen den Komponenten wird klarer</li>
<li>Padrino behandelt Padrino Erweiterungen (Engines) expliziter</li>
<li>Philosophie bei Padrino: Setzt euch mit den Dingen auseinander!</li>
</ul></li>
<li>Rails und Einsteiger? Auch nicht mehr ganz so einfach…

<ul>
<li>Yehuda Katz baut deswegen Tokaido (<a href="https://github.com/tokaido/tokaidoapp">https://github.com/tokaido/tokaidoapp</a>)</li>
<li>Steve Klabnik: Rails has Two Default Stacks (<a href="http://words.steveklabnik.com/rails-has-two-default-stacks">http://words.steveklabnik.com/rails-has-two-default-stacks</a>)</li>
</ul></li>
<li>Padrino Getting Started

<ul>
<li>Es gibt auch Generatoren</li>
<li>Schritt Eins: HTTP-Stack</li>
<li>Komponenten müssen ausgewählt werden

<ul>
<li>Von Test-Framework bis ORM alles auszuwählen</li>
<li>In Ruby passt eigentlich alles gut zusammen ohne viel Aufwand</li>
</ul></li>
<li>Mit Rack (<a href="http://rack.github.com/">http://rack.github.com/</a>) ist alles besser geworden</li>
</ul></li>
<li>Es gibt auch noch Ramaze: The Web Framework for Rubyists (<a href="http://ramaze.net/">http://ramaze.net/</a>)</li>
<li>Flo träumt von Jeremy Evans’ sequel (<a href="https://github.com/jeremyevans/sequel">https://github.com/jeremyevans/sequel</a>)</li>
<li>PostgreSQL hstore (<a href="http://www.postgresql.org/docs/9.0/static/hstore.html">http://www.postgresql.org/docs/9.0/static/hstore.html</a>)

<ul>
<li>ActiveRecord hat mittlerweile auch eine Unterstützung</li>
</ul></li>
<li>ORM tauschen ist mit Padrino genauso schwer wie bei Rails

<ul>
<li>Bei echten Projekten tauscht man nicht einfach mal so das DB-Backend, ORM hin oder her</li>
<li>Padrino macht es auch nicht einfacher, gibt einem aber von Anfang die Info, dass es mehr
als ein gibt</li>
</ul></li>
<li>Doku bei Rails sehr monolitisch, bei Padrino für jede Komponente eine eigene, unabhängige Doku</li>
<li>Der Austausch von ActiveRecord ist wegen ActiveModel sehr leicht geworden

<ul>
<li>Sehr viele ORMs und Form-Helper nutzen sehr viel ActiveModel</li>
</ul></li>
<li>Padrino benutzt ActiveSupport

<ul>
<li>Allerdings sehr wenig by default</li>
</ul></li>
<li>Zwischenfazit: Der Entwickler wird bei Padrino eher gezwungen sich mit Komponenten und Entscheidungen
kritisch zu beschäftigen</li>
<li>Padrino bietet besser dokumentierte APIs um Komponenten einzuschieben

<ul>
<li>Rails 2 Zeiten - reden wir nicht drüber</li>
<li>Immer noch Altlasten, z.B.: viele Möglichkeiten aus dem Controller zu rendern</li>
<li>Rails ist einfach gute Konkurrenz ;-)</li>
<li>Rails ist schon ein sehr mächtiges Werkzeug</li>
</ul></li>
<li>Als Rails-Entwickler kann man sich gut von Padrino inspirieren lassen</li>
<li>Basti ist beeindruckt vom Merb-Rails Merge (<a href="http://rubyonrails.org/merb">http://rubyonrails.org/merb</a>)</li>
</ul>

<h3>Software Engineering</h3>

<ul>
<li>Bezug &quot;How do we stop our Rails apps from being so horrible when they grow up?&quot; (<a href="http://bit.ly/VFtzUI">http://bit.ly/VFtzUI</a>)

<ul>
<li>Alles unter dem Controller ist für Dirk immer noch ein sehr schwieriges Thema</li>
</ul></li>
<li>Kann Padrino da unterstützen? Durch Aufklärung?

<ul>
<li>Bei Padrino ist der Tipp: Schnell raus aus dem Controller</li>
<li>Ein Webframework sollte vor allem den Web-Teil richtig machen</li>
<li>Bei allem danach hört die Unterstützung schnell auf</li>
</ul></li>
<li>DCI (Data, context and interaction)</li>
<li>Flo arbeitet gerade einem Projekt mit Delegates ähnlich wie in Objective-C: Funktioniert super.</li>
<li>Dependency Injection ist eigentlich nur die richtigen Objekte an die richtige Stelle schieben

<ul>
<li>DI muss nicht Spring mit XML sein</li>
<li>Geht in Ruby viel einfacher</li>
<li>Geht auch in Java viel einfacher: Google Guice (<a href="https://code.google.com/p/google-guice/">https://code.google.com/p/google-guice/</a>)</li>
</ul></li>
<li>&quot;Am Ende trennt sich bei diesen Themen einfach die Spreu vom Weizen&quot;

<ul>
<li>ActiveRecord führt einen aber vielleicht zu weit in einen falsche Richtung</li>
<li>Allerdings: Nie wieder ohne ORM</li>
</ul></li>
<li>Anemic Domain Model von Martin Fowler (<a href="http://martinfowler.com/bliki/AnemicDomainModel.html">http://martinfowler.com/bliki/AnemicDomainModel.html</a>)

<ul>
<li>Ist ein Anti-Pattern</li>
<li>Sieht aus wie ein Domain-Model, aber:

<ul>
<li>Models halten nur Daten</li>
<li>Verhalten lebt in einem prozeduralen Service-Layer</li>
</ul></li>
<li>Lösung sind dann &quot;richtige&quot; Domain-Models (<a href="http://martinfowler.com/eaaCatalog/domainModel.html">http://martinfowler.com/eaaCatalog/domainModel.html</a>) und
&quot;richtige&quot; Service-Layer (<a href="http://martinfowler.com/eaaCatalog/serviceLayer.html">http://martinfowler.com/eaaCatalog/serviceLayer.html</a>)</li>
<li>Basti hat bisher noch nie davon gehört</li>
<li>Flo hat P of EAA nur überflogen aber Refactoring gefressen

<ul>
<li>Wichtigste Erkenntnis: Feature Hut ODER Refactoring Hut NIEMALS beides!</li>
</ul></li>
</ul></li>
<li>Die Zwei Stacks von Rails (<a href="http://words.steveklabnik.com/rails-has-two-default-stacks">http://words.steveklabnik.com/rails-has-two-default-stacks</a>)

<ul>
<li>Omakase (<a href="http://en.wikipedia.org/wiki/Omakase">http://en.wikipedia.org/wiki/Omakase</a>) vs. Prime (<a href="http://en.wikipedia.org/wiki/Prime_(symbol)#Use_in_mathematics.2C_statistics.2C_and_science">http://en.wikipedia.org/wiki/Prime_(symbol)#Use_in_mathematics.2C_statistics.2C_and_science</a>)

<ul>
<li>Omakase: ERB, MySQL, minitest, Fat Models, Skinny Controllers</li>
<li>Prima: HAML, PostgreSQL, RSpec &amp; Cucumber, Fat Models, Skinny
Controllers, Service Layer</li>
</ul></li>
<li>Für Rails ist DHH der Sushi-Chef: <a href="http://david.heinemeierhansson.com/2012/rails-is-omakase.html">http://david.heinemeierhansson.com/2012/rails-is-omakase.html</a></li>
<li>Es geht nicht um besser oder schlechter</li>
<li>Wie kommen Anfänger klar?</li>
<li>Eigentlich muss man sich gar nicht aktiv entscheiden, wie kommt man überhaupt auf den anderen Stack

<ul>
<li>PostgreSQL ist die Profi-Alernative zu MySQL</li>
<li>Mehr Aufwand in der Wartung verhält sich aber viel wartbarer</li>
<li>MySQL lässt sich trotzdem sehr gut betreiben</li>
<li>Flo steht auf rustikale Software</li>
<li>Man entdeckt Tablespaces (<a href="http://www.postgresql.org/docs/8.3/static/manage-ag-tablespaces.html">http://www.postgresql.org/docs/8.3/static/manage-ag-tablespaces.html</a>)</li>
</ul></li>
<li>Basti mag eher RSpec aber nimmt sonst eher den Omakase Stack</li>
<li>Flo mag mehr ERb nimmt aber Postgres</li>
<li>Eigentlich passt der Name eh nicht, weil ein guter Chef setzt einem nicht zweimal das gleiche Essen vor

<ul>
<li>Idee: Stack-Randomizer im Projektgenerator</li>
</ul></li>
</ul></li>
<li>Flo kennt das Rubyworks-Ökosystem

<ul>
<li>Wir haben das maßlos unterschätzt</li>
<li>Ist Thomas Sawyer (<a href="http://rubyworks.github.com/">http://rubyworks.github.com/</a>)</li>
<li>Ruby Q.E.D.: Cucumber auf Steroiden (<a href="https://github.com/rubyworks/qed">https://github.com/rubyworks/qed</a>)</li>
<li>Verwendet AE als Test-Lib (<a href="http://rubyworks.github.com/ae/">http://rubyworks.github.com/ae/</a>) auch von ihm</li>
<li>Es lassen sich damit Blog-Posts testen</li>
</ul></li>
<li>Semantic-Versioning at its best: <a href="https://github.com/sunaku/tork">https://github.com/sunaku/tork</a></li>
<li>Mit viel Liebe und Mühe sehr gute Libraries und die Masse verwendet es noch nichtmal

<ul>
<li><a href="https://github.com/sunaku/inochi">https://github.com/sunaku/inochi</a></li>
</ul></li>
<li>RSpec&#39;s Doku ist in Cucumber (<a href="https://www.relishapp.com/">https://www.relishapp.com/</a>)</li>
<li>Dokumentation ist nicht trivial</li>
<li>Zed Shaw hat einmal gesagt, dass das Problem darin besteht, dass wir den Leuten beibringen müssen wie sie es entwicklen

<ul>
<li>Die Technik ist da, das Lernen ist das Problem</li>
<li>Code-Review ist dafür gut</li>
<li>In guten Teams geht nichts einfach durch</li>
<li>Es geht dabei um Code, nicht um Kritik an der Person</li>
</ul></li>
</ul>

<h3>Tools</h3>

<ul>
<li>JSON

<ul>
<li>JSON Pretty Print: <a href="https://github.com/jmhodges/jsonpp">https://github.com/jmhodges/jsonpp</a></li>
<li>jq: <a href="http://stedolan.github.com/jq/">http://stedolan.github.com/jq/</a>

<ul>
<li>JSON Path ist Kindergarten</li>
</ul></li>
</ul></li>
<li>httpie statt curl: <a href="https://github.com/jkbr/httpie">https://github.com/jkbr/httpie</a></li>
<li>CodeRay hat einen Terminal Highlighter (<a href="http://coderay.rubychan.de/">http://coderay.rubychan.de/</a>)

<ul>
<li>Sehr genau, weniger Sprachen als Pygments (<a href="http://pygments.org/">http://pygments.org/</a>)</li>
</ul></li>
<li>Hosting Static Pages:

<ul>
<li>GitHub Pages (<a href="http://pages.github.com/">http://pages.github.com/</a>)</li>
<li>Muss nicht nur Jekyll sein…</li>
<li><a href="http://neilmiddleton.com/the-composability-of-buildpacks/">http://neilmiddleton.com/the-composability-of-buildpacks/</a></li>
<li><a href="http://middlemanapp.com/">http://middlemanapp.com/</a> -&gt; Heroku</li>
<li>Auch gut für Bloggen im Zug</li>
</ul></li>
<li>Empfehlung: Syntax-Sonntag bei Ruby-Mine (<a href="http://www.ruby-mine.de/">http://www.ruby-mine.de/</a>)

<ul>
<li>Sehr gute Einführung in Oniguruma (<a href="http://www.ruby-mine.de/wonado">http://www.ruby-mine.de/wonado</a>)</li>
</ul></li>
<li>Gutes deutsches Ruby-Wiki: <a href="http://wiki.ruby-portal.de/Hauptseite">http://wiki.ruby-portal.de/Hauptseite</a></li>
<li>Open-Source Nachbau des RPG-Makers (<a href="http://www.rpgmakerweb.com/">http://www.rpgmakerweb.com/</a>) in Ruby (<a href="http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards">http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards</a>)</li>
<li>Ruby-Forum ist immer noch in PHP :-)</li>
<li>Foren sind irgendwie nicht mehr aktuell, wird aber noch nachgefragt</li>
</ul>

<h3>Events</h3>

<ul>
<li>Insider-Infos zur SIGINT (Nachtrag):

<ul>
<li>Mehr Technik-Bezug incoming!</li>
<li>CFP soll ganz bald starten</li>
</ul></li>
<li>eurucamp findet auch wieder 2013 statt: <a href="http://eurucamp.org/">http://eurucamp.org/</a> (16. - 18. August 2013)</li>
</ul>
]]></description>
          <atom:link rel="http://podlove.org/deep-link" href="http://geekstammtisch.de#3:" />
        </item>
        
        <item>
          <title>GST004 - Ich dachte C ist fertig</title>
          <itunes:explicit>no</itunes:explicit>
          <itunes:author>Dirk Breuer, Sebastian Cohnen</itunes:author>
          <itunes:subtitle>GST004 - Ich dachte C ist fertig</itunes:subtitle>
          <enclosure url="http://media.geekstammtisch.de/episodes/gst004.mp3" length="52196815" type="audio/mpeg"/>
          <guid isPermaLink="false">GST004</guid>
          <pubDate>Tue, 05 Feb 2013 00:31:37 +0100</pubDate>
          <itunes:duration>01:12:18</itunes:duration>
          <itunes:summary><![CDATA[Unser Gast ist heute: Frank Celler (@fceller, http://triagens.com)

**Synopsis**: Heute geht es um mruby, C-Hacking und Bytecode-Compiler

### Errata

  * Neue RubyWiki Seite zum Open RPG Maker: http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards
    (danke @qquintilianus, https://twitter.com/qquintilianus/status/298385311761842176)

### Unser Gast

  * Als Errata zu GST001, mruby ;-)
  * Frank ist kein Rubyist, sondern C-Hacker

### (M)Ruby

  * Steht für Matz Minimal Embedded Ruby
  * Um irgendwo embedded zu werden
    * Hardware (zB.: Roboter)
    * iOS (http://mobiruby.org/)
    * Andere Programme (zB: Datenbanken)
  * Redis (http://redis.io/) embedded zum Beispiel Lua (http://www.lua.org/)
    * Da Lua irgendwie nicht so richtig für Programmierer ist, könnte
      mruby hier eine Lücke schließen
  * Ruby 1.8 ist nicht dafür entworfen irgendwo eingebettet zu werden
  * **mruby in a Nutshell**
    * Bytecode-Compiler (ähnlich wie YARV in Ruby 1.9)
    * Soll eine sehr, sehr kleine, überall lauffähige VM bieten
      (Rite-VM)
    * Ein sehr kleiner Satz von Libraries
      * Es gibt _kein_ `require`
      * Es gibt `mgem` (https://github.com/bovi/mgem)
      * **Einschub:** http://mruby.sh/ -> Englische Übersetzung der japanischen News
        von Daniel Bovensiepen (http://www.bovensiepen.net/)
      * mgems sind quasi C-Libs
      * Stdlib ist quasi nicht existent
      * Core ist auch stark eingeschränkt (kein Bignum, keine Regexp,
        keine Threads)
      * Es gibt als mgem eine cURL-Lib (was für eine Datenbank die HTTP
        spricht ganz sinnvoll ist)
      * mruby ohne Threads macht vor allem für Datenbanken Sinn
      * Ruby ist ein Standard: http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579
      * Inzwischen gehen auch `attr_accessor` und andere Introspection
        Features
      * mruby wird magischer ;-)
  * Wo hat der Frank mruby überhaupt eingebettet?
    * ArangoDB - http://www.arangodb.org/
    * Eine Open-Source Dokumentendatenbank
  * Wofür bettet man eine Scriptsprache in eine Datenbank ein?
    * Filtern von Ausgaben
    * Implementierung von Triggern (statt PL/SQL - http://en.wikipedia.org/wiki/PL/SQL)
    * Anreichern von Ausgaben
    * Welche Scriptsprache nimmt man da:
      * PHP trauen wir uns nicht
      * JavaScript funktioniert mit V8 (https://code.google.com/p/v8/), wurde dann auch integriert
        * Dokumentation ist grausam
        * Sehr schnell, in C++
        * wenn man einen Fehler sucht, kann man nur aufgeben ;-)
  * Arango ist in C/C++ geschrieben
    * Haben sehr früh Zugang zum mruby Repo bekommen
  * mruby lässt sich sehr leicht einbetten
  * Dokumentation ist genauso schlecht wie die von V8
    * Man kommt aber noch zu Fuß durch den Code
  * Probleme bei V8 war JavaScript-Prototypen in C++ Objekte abzubilden
  * mruby wurde mit dem Gedanke entwickelt eingebettet zu werden, daher
    sind entsprechende Hooks vorgesehen C-Strukturen in Ruby abzubilden
  * V8 verwendet UTF-16, Arango verwendet UTF-8
  * mruby verwendet auch UTF-8 -> Overhead fällt weg
  * Frank hat mit LLVM rum gespielt und hat aus mruby den Faktor 2-3 raus geholt
  * Was noch viel für die Performance tun kann ist Method-Caching
  * Momentan ist mruby noch Alpha-Status
    * In der homebrew Version ist mruby drin
    * Für Linux muss es per Hand gebaut werden
  * Bei ArangoDB ist eine Shell für mruby dabei (siehe auch: http://qiezi.me/projects/mruby-web-irb/mruby.html)
  * emscripten.org
  * Die mruby Shell in ArangoDB ist analog zu der JavaScript Shell in
    ArangoDB
  * mruby hatte bis vor kurzem keine richtiges Makefile
    * Daniel Bovensiepen hat dann ein CMake-File erstellt (http://cmake.org)
    * Seit Dezember 2012 gibt es auch ein Rakefile
    * War unter Windows vor der totale Krampf
  * ArangoDB gibt es seit kurzem auch für Windows
    * Probleme mit libev und ICU
  * UTF-8 hat zwei Darstellung für Umlaute: den Umlaut und zwei Punkte + Buchstabe
  * Basti hatte einmal sehr viel Freude mit case-insensitive und case-sensitive Systemen
  * Macht auch Probleme bei Collation
  * ICU macht das einfach für einen (http://site.icu-project.org/)
  * Die Windows-Version von ArangoDB hat keinen mruby Support
  * mruby targeted aber Windows
  * Anekdote: Die C-Standards entwickeln sich im Jahrzehnt-Rhytmus
  * VisualStudio ist bei ANSI-C Version '89 stehengeblieben
  * Frank macht C schon seit 30 Jahren
    * Hat für den TRS-80 ein Arcade-Spiel nachprogrammiert (http://en.wikipedia.org/wiki/TRS-80)
    * Frank hat das Spiel auf einem TRS-80 Emulator für Linux widergefunden :-)
    * "Magic Worm for Model I" (http://fosdem.graph-database.org/news/8,
      http://www.retrocomputing.net/parts/r/radio/TRS80_4/docs/on2002.htm)
  * Frank erinnert einen C Interpreter
  * Wenn C dann lieber Objective-C, meint Frank
  * Ist für Rubyisten noch eingängiger, vom mentalen Modell
  * Basti hat auf dem letzten DevHouseFriday 'Ruby is Magic - Reflections' gezeigt (https://speakerdeck.com/railsbros_dirk/colognerb-reflections)
  * Cocoa ist von oben bis unten voll mit Magic
  * ArangoDB im MacApp-Store: https://itunes.apple.com/de/app/arangodb/id564723448?l=en&mt=12
    * War letztes Jahr unter den Top-10 für Dev-Tools
    * Ohne mruby
    * Ähnlich wie damals CouchDBX: http://janl.github.com/couchdbx/
  * Die JavaScript-Shell von ArangoDB läuft im Browser
  * Die ArangoDB-Shell ist ein eigener Client und spricht mit dem Server über HTTP
    * JavaScript-Console für den Browser: http://replit.github.com/jq-console/
  * http://stedolan.github.com/jq/
  * The JSON Query Language: http://www.jsoniq.org/
    * Ähnlich wie das was ArangoDB verwendet (unabhängig)

### Events

  * NoSQL Matters: 25. - 27.4.2013 (http://2013.nosql-matters.org/cgn/)
    * Early Bird Tickets schon verfügbar
    * 25.4. ist Training Day
    * Keynote: Martin Fowler
    * Im KOMED in Köln
    * Mit Hadoop-Track
    * Und der Rest der bisher veröffentlichen Speaker ist nicht weniger hochkarätig

BTW: Jan Lenhardt ist jetzt bei 'The Couch Firm' - http://thecouchfirm.com/]]></itunes:summary>
          <description><![CDATA[<p>Unser Gast ist heute: Frank Celler (<a href="https://twitter.com/fceller">@fceller</a>, <a href="http://triagens.com">http://triagens.com</a>)</p>

<p><strong>Synopsis</strong>: Heute geht es um mruby, C-Hacking und Bytecode-Compiler</p>

<h3>Errata</h3>

<ul>
<li>Neue RubyWiki Seite zum Open RPG Maker: <a href="http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards">http://devel.pegasus-alpha.eu/projects/openrubyrmk/boards</a>
(danke <a href="https://twitter.com/qquintilianus">@qquintilianus</a>, <a href="https://twitter.com/qquintilianus/status/298385311761842176">https://twitter.com/qquintilianus/status/298385311761842176</a>)</li>
</ul>

<h3>Unser Gast</h3>

<ul>
<li>Als Errata zu GST001, mruby ;-)</li>
<li>Frank ist kein Rubyist, sondern C-Hacker</li>
</ul>

<h3>(M)Ruby</h3>

<ul>
<li>Steht für Matz Minimal Embedded Ruby</li>
<li>Um irgendwo embedded zu werden

<ul>
<li>Hardware (zB.: Roboter)</li>
<li>iOS (<a href="http://mobiruby.org/">http://mobiruby.org/</a>)</li>
<li>Andere Programme (zB: Datenbanken)</li>
</ul></li>
<li>Redis (<a href="http://redis.io/">http://redis.io/</a>) embedded zum Beispiel Lua (<a href="http://www.lua.org/">http://www.lua.org/</a>)

<ul>
<li>Da Lua irgendwie nicht so richtig für Programmierer ist, könnte
mruby hier eine Lücke schließen</li>
</ul></li>
<li>Ruby 1.8 ist nicht dafür entworfen irgendwo eingebettet zu werden</li>
<li><strong>mruby in a Nutshell</strong>

<ul>
<li>Bytecode-Compiler (ähnlich wie YARV in Ruby 1.9)</li>
<li>Soll eine sehr, sehr kleine, überall lauffähige VM bieten
(Rite-VM)</li>
<li>Ein sehr kleiner Satz von Libraries

<ul>
<li>Es gibt <em>kein</em> <code>require</code></li>
<li>Es gibt <code>mgem</code> (<a href="https://github.com/bovi/mgem">https://github.com/bovi/mgem</a>)</li>
<li><strong>Einschub:</strong> <a href="http://mruby.sh/">http://mruby.sh/</a> -&gt; Englische Übersetzung der japanischen News
von Daniel Bovensiepen (<a href="http://www.bovensiepen.net/">http://www.bovensiepen.net/</a>)</li>
<li>mgems sind quasi C-Libs</li>
<li>Stdlib ist quasi nicht existent</li>
<li>Core ist auch stark eingeschränkt (kein Bignum, keine Regexp,
keine Threads)</li>
<li>Es gibt als mgem eine cURL-Lib (was für eine Datenbank die HTTP
spricht ganz sinnvoll ist)</li>
<li>mruby ohne Threads macht vor allem für Datenbanken Sinn</li>
<li>Ruby ist ein Standard: <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579">http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579</a></li>
<li>Inzwischen gehen auch <code>attr_accessor</code> und andere Introspection
Features</li>
<li>mruby wird magischer ;-)</li>
</ul></li>
</ul></li>
<li>Wo hat der Frank mruby überhaupt eingebettet?

<ul>
<li>ArangoDB - <a href="http://www.arangodb.org/">http://www.arangodb.org/</a></li>
<li>Eine Open-Source Dokumentendatenbank</li>
</ul></li>
<li>Wofür bettet man eine Scriptsprache in eine Datenbank ein?

<ul>
<li>Filtern von Ausgaben</li>
<li>Implementierung von Triggern (statt PL/SQL - <a href="http://en.wikipedia.org/wiki/PL/SQL">http://en.wikipedia.org/wiki/PL/SQL</a>)</li>
<li>Anreichern von Ausgaben</li>
<li>Welche Scriptsprache nimmt man da:

<ul>
<li>PHP trauen wir uns nicht</li>
<li>JavaScript funktioniert mit V8 (<a href="https://code.google.com/p/v8/">https://code.google.com/p/v8/</a>), wurde dann auch integriert</li>
<li>Dokumentation ist grausam</li>
<li>Sehr schnell, in C++</li>
<li>wenn man einen Fehler sucht, kann man nur aufgeben ;-)</li>
</ul></li>
</ul></li>
<li>Arango ist in C/C++ geschrieben

<ul>
<li>Haben sehr früh Zugang zum mruby Repo bekommen</li>
</ul></li>
<li>mruby lässt sich sehr leicht einbetten</li>
<li>Dokumentation ist genauso schlecht wie die von V8

<ul>
<li>Man kommt aber noch zu Fuß durch den Code</li>
</ul></li>
<li>Probleme bei V8 war JavaScript-Prototypen in C++ Objekte abzubilden</li>
<li>mruby wurde mit dem Gedanke entwickelt eingebettet zu werden, daher
sind entsprechende Hooks vorgesehen C-Strukturen in Ruby abzubilden</li>
<li>V8 verwendet UTF-16, Arango verwendet UTF-8</li>
<li>mruby verwendet auch UTF-8 -&gt; Overhead fällt weg</li>
<li>Frank hat mit LLVM rum gespielt und hat aus mruby den Faktor 2-3 raus geholt</li>
<li>Was noch viel für die Performance tun kann ist Method-Caching</li>
<li>Momentan ist mruby noch Alpha-Status

<ul>
<li>In der homebrew Version ist mruby drin</li>
<li>Für Linux muss es per Hand gebaut werden</li>
</ul></li>
<li>Bei ArangoDB ist eine Shell für mruby dabei (siehe auch: <a href="http://qiezi.me/projects/mruby-web-irb/mruby.html">http://qiezi.me/projects/mruby-web-irb/mruby.html</a>)</li>
<li>emscripten.org</li>
<li>Die mruby Shell in ArangoDB ist analog zu der JavaScript Shell in
ArangoDB</li>
<li>mruby hatte bis vor kurzem keine richtiges Makefile

<ul>
<li>Daniel Bovensiepen hat dann ein CMake-File erstellt (<a href="http://cmake.org">http://cmake.org</a>)</li>
<li>Seit Dezember 2012 gibt es auch ein Rakefile</li>
<li>War unter Windows vor der totale Krampf</li>
</ul></li>
<li>ArangoDB gibt es seit kurzem auch für Windows

<ul>
<li>Probleme mit libev und ICU</li>
</ul></li>
<li>UTF-8 hat zwei Darstellung für Umlaute: den Umlaut und zwei Punkte + Buchstabe</li>
<li>Basti hatte einmal sehr viel Freude mit case-insensitive und case-sensitive Systemen</li>
<li>Macht auch Probleme bei Collation</li>
<li>ICU macht das einfach für einen (<a href="http://site.icu-project.org/">http://site.icu-project.org/</a>)</li>
<li>Die Windows-Version von ArangoDB hat keinen mruby Support</li>
<li>mruby targeted aber Windows</li>
<li>Anekdote: Die C-Standards entwickeln sich im Jahrzehnt-Rhytmus</li>
<li>VisualStudio ist bei ANSI-C Version &#39;89 stehengeblieben</li>
<li>Frank macht C schon seit 30 Jahren

<ul>
<li>Hat für den TRS-80 ein Arcade-Spiel nachprogrammiert (<a href="http://en.wikipedia.org/wiki/TRS-80">http://en.wikipedia.org/wiki/TRS-80</a>)</li>
<li>Frank hat das Spiel auf einem TRS-80 Emulator für Linux widergefunden :-)</li>
<li>&quot;Magic Worm for Model I&quot; (<a href="http://fosdem.graph-database.org/news/8">http://fosdem.graph-database.org/news/8</a>,
<a href="http://www.retrocomputing.net/parts/r/radio/TRS80_4/docs/on2002.htm">http://www.retrocomputing.net/parts/r/radio/TRS80_4/docs/on2002.htm</a>)</li>
</ul></li>
<li>Frank erinnert einen C Interpreter</li>
<li>Wenn C dann lieber Objective-C, meint Frank</li>
<li>Ist für Rubyisten noch eingängiger, vom mentalen Modell</li>
<li>Basti hat auf dem letzten DevHouseFriday &#39;Ruby is Magic - Reflections&#39; gezeigt (<a href="https://speakerdeck.com/railsbros_dirk/colognerb-reflections">https://speakerdeck.com/railsbros_dirk/colognerb-reflections</a>)</li>
<li>Cocoa ist von oben bis unten voll mit Magic</li>
<li>ArangoDB im MacApp-Store: <a href="https://itunes.apple.com/de/app/arangodb/id564723448?l=en&amp;mt=12">https://itunes.apple.com/de/app/arangodb/id564723448?l=en&amp;mt=12</a>

<ul>
<li>War letztes Jahr unter den Top-10 für Dev-Tools</li>
<li>Ohne mruby</li>
<li>Ähnlich wie damals CouchDBX: <a href="http://janl.github.com/couchdbx/">http://janl.github.com/couchdbx/</a></li>
</ul></li>
<li>Die JavaScript-Shell von ArangoDB läuft im Browser</li>
<li>Die ArangoDB-Shell ist ein eigener Client und spricht mit dem Server über HTTP

<ul>
<li>JavaScript-Console für den Browser: <a href="http://replit.github.com/jq-console/">http://replit.github.com/jq-console/</a></li>
</ul></li>
<li><a href="http://stedolan.github.com/jq/">http://stedolan.github.com/jq/</a></li>
<li>The JSON Query Language: <a href="http://www.jsoniq.org/">http://www.jsoniq.org/</a>

<ul>
<li>Ähnlich wie das was ArangoDB verwendet (unabhängig)</li>
</ul></li>
</ul>

<h3>Events</h3>

<ul>
<li>NoSQL Matters: 25. - 27.4.2013 (<a href="http://2013.nosql-matters.org/cgn/">http://2013.nosql-matters.org/cgn/</a>)

<ul>
<li>Early Bird Tickets schon verfügbar</li>
<li>25.4. ist Training Day</li>
<li>Keynote: Martin Fowler</li>
<li>Im KOMED in Köln</li>
<li>Mit Hadoop-Track</li>
<li>Und der Rest der bisher veröffentlichen Speaker ist nicht weniger hochkarätig</li>
</ul></li>
</ul>

<p>BTW: Jan Lenhardt ist jetzt bei &#39;The Couch Firm&#39; - <a href="http://thecouchfirm.com/">http://thecouchfirm.com/</a></p>
]]></description>
          <atom:link rel="http://podlove.org/deep-link" href="http://geekstammtisch.de#4:" />
        </item>
        
    </channel>
</rss>
